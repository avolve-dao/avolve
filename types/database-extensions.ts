import { Database as OriginalDatabase } from './supabase';

/**
 * Extended Database interface that includes additional tables and functions
 * not automatically generated by the Supabase CLI
 */
export type Database = OriginalDatabase & {
  public: {
    Tables: {
      profiles: {
        Row: {
          id: string;
          full_name: string | null;
          email_notifications: boolean | null;
          created_at: string | null;
          updated_at: string | null;
          avatar_url: string | null;
          bio: string | null;
          interests: string[] | null;
          onboarding_completed: boolean | null;
          user_role: string | null;
          is_admin: boolean | null;
        };
        Insert: {
          id: string;
          full_name?: string | null;
          email_notifications?: boolean | null;
          created_at?: string | null;
          updated_at?: string | null;
          avatar_url?: string | null;
          bio?: string | null;
          interests?: string[] | null;
          onboarding_completed?: boolean | null;
          user_role?: string | null;
          is_admin?: boolean | null;
        };
        Update: {
          id?: string;
          full_name?: string | null;
          email_notifications?: boolean | null;
          created_at?: string | null;
          updated_at?: string | null;
          avatar_url?: string | null;
          bio?: string | null;
          interests?: string[] | null;
          onboarding_completed?: boolean | null;
          user_role?: string | null;
          is_admin?: boolean | null;
        };
        Relationships: [
          {
            foreignKeyName: 'profiles_id_fkey';
            columns: ['id'];
            isOneToOne: true;
            referencedRelation: 'users';
            referencedColumns: ['id'];
          },
        ];
      };
      invitations: {
        Row: {
          id: string;
          code: string;
          email: string | null;
          created_at: string;
          updated_at: string | null;
          expires_at: string | null;
          created_by: string | null;
          claimed_by: string | null;
          max_uses: number;
          uses: number;
          used: boolean;
          used_at: string | null;
          metadata: Record<string, any> | null;
        };
        Insert: {
          id?: string;
          code?: string;
          email?: string | null;
          created_at?: string;
          updated_at?: string | null;
          expires_at?: string | null;
          created_by?: string | null;
          claimed_by?: string | null;
          max_uses?: number;
          uses?: number;
          used?: boolean;
          used_at?: string | null;
          metadata?: Record<string, any> | null;
        };
        Update: {
          id?: string;
          code?: string;
          email?: string | null;
          created_at?: string;
          updated_at?: string | null;
          expires_at?: string | null;
          created_by?: string | null;
          claimed_by?: string | null;
          max_uses?: number;
          uses?: number;
          used?: boolean;
          used_at?: string | null;
          metadata?: Record<string, any> | null;
        };
        Relationships: [
          {
            foreignKeyName: 'invitations_created_by_fkey';
            columns: ['created_by'];
            isOneToOne: false;
            referencedRelation: 'profiles';
            referencedColumns: ['id'];
          },
        ];
      };
      metrics: {
        Row: {
          id: string;
          user_id: string | null;
          metric_type:
            | 'activation'
            | 'engagement'
            | 'retention'
            | 'arpu'
            | 'conversion'
            | 'growth'
            | 'custom';
          metric_value: number;
          details: Record<string, any> | null;
          notes: string | null;
          created_at: string;
          updated_at: string | null;
          recorded_at: string | null;
        };
        Insert: {
          id?: string;
          user_id?: string | null;
          metric_type:
            | 'activation'
            | 'engagement'
            | 'retention'
            | 'arpu'
            | 'conversion'
            | 'growth'
            | 'custom';
          metric_value: number;
          details?: Record<string, any> | null;
          notes?: string | null;
          created_at?: string;
          updated_at?: string | null;
          recorded_at?: string | null;
        };
        Update: {
          id?: string;
          user_id?: string | null;
          metric_type?:
            | 'activation'
            | 'engagement'
            | 'retention'
            | 'arpu'
            | 'conversion'
            | 'growth'
            | 'custom';
          metric_value?: number;
          details?: Record<string, any> | null;
          notes?: string | null;
          created_at?: string;
          updated_at?: string | null;
          recorded_at?: string | null;
        };
        Relationships: [
          {
            foreignKeyName: 'metrics_user_id_fkey';
            columns: ['user_id'];
            isOneToOne: false;
            referencedRelation: 'profiles';
            referencedColumns: ['id'];
          },
        ];
      };
      notifications: {
        Row: {
          id: string;
          user_id: string;
          type: string;
          title: string;
          content: string;
          read: boolean;
          data: Record<string, any> | null;
          created_at: string;
          updated_at: string | null;
        };
        Insert: {
          id?: string;
          user_id: string;
          type: string;
          title: string;
          content: string;
          read?: boolean;
          data?: Record<string, any> | null;
          created_at?: string;
          updated_at?: string | null;
        };
        Update: {
          id?: string;
          user_id?: string;
          type?: string;
          title?: string;
          content?: string;
          read?: boolean;
          data?: Record<string, any> | null;
          created_at?: string;
          updated_at?: string | null;
        };
        Relationships: [
          {
            foreignKeyName: 'notifications_user_id_fkey';
            columns: ['user_id'];
            isOneToOne: false;
            referencedRelation: 'profiles';
            referencedColumns: ['id'];
          },
        ];
      };
      feature_flags: {
        Row: {
          id: string;
          key: string;
          name: string;
          description: string | null;
          default_enabled: boolean;
          created_at: string;
          updated_at: string | null;
        };
        Insert: {
          id?: string;
          key: string;
          name: string;
          description?: string | null;
          default_enabled?: boolean;
          created_at?: string;
          updated_at?: string | null;
        };
        Update: {
          id?: string;
          key?: string;
          name?: string;
          description?: string | null;
          default_enabled?: boolean;
          created_at?: string;
          updated_at?: string | null;
        };
        Relationships: [];
      };
      user_features: {
        Row: {
          id: string;
          user_id: string;
          feature_key: string;
          enabled: boolean;
          created_at: string;
          updated_at: string | null;
        };
        Insert: {
          id?: string;
          user_id: string;
          feature_key: string;
          enabled?: boolean;
          created_at?: string;
          updated_at?: string | null;
        };
        Update: {
          id?: string;
          user_id?: string;
          feature_key?: string;
          enabled?: boolean;
          created_at?: string;
          updated_at?: string | null;
        };
        Relationships: [
          {
            foreignKeyName: 'user_features_user_id_fkey';
            columns: ['user_id'];
            isOneToOne: false;
            referencedRelation: 'profiles';
            referencedColumns: ['id'];
          },
          {
            foreignKeyName: 'user_features_feature_key_fkey';
            columns: ['feature_key'];
            isOneToOne: false;
            referencedRelation: 'feature_flags';
            referencedColumns: ['key'];
          },
        ];
      };
      user_tokens: {
        Row: {
          id: string;
          user_id: string;
          token_type: string;
          balance: number;
          created_at: string;
          updated_at: string | null;
        };
        Insert: {
          id?: string;
          user_id: string;
          token_type: string;
          balance?: number;
          created_at?: string;
          updated_at?: string | null;
        };
        Update: {
          id?: string;
          user_id?: string;
          token_type?: string;
          balance?: number;
          created_at?: string;
          updated_at?: string | null;
        };
        Relationships: [
          {
            foreignKeyName: 'user_tokens_user_id_fkey';
            columns: ['user_id'];
            isOneToOne: false;
            referencedRelation: 'profiles';
            referencedColumns: ['id'];
          },
        ];
      };
    };
    Functions: {
      claim_invitation: {
        Args: {
          p_code: string;
        };
        Returns: boolean;
      };
      create_invitation: {
        Args: {
          p_email?: string;
          p_max_uses?: number;
          p_expires_in?: string;
          p_metadata?: Record<string, any>;
        };
        Returns: Record<string, any>;
      };
      validate_invitation_code: {
        Args: {
          p_code: string;
        };
        Returns: boolean;
      };
      update_onboarding_progress: {
        Args: {
          p_step: string;
          p_completed?: boolean;
        };
        Returns: Record<string, any>;
      };
      get_user_progress: {
        Args: Record<string, never>;
        Returns: Record<string, any>;
      };
      get_next_milestones: {
        Args: Record<string, never>;
        Returns: Record<string, any>[];
      };
      get_user_token_balances: {
        Args: Record<string, never>;
        Returns: {
          token_type: string;
          balance: number;
        }[];
      };
      add_user_tokens: {
        Args: {
          p_user_id?: string;
          p_token_type: string;
          p_amount: number;
          p_reason?: string;
        };
        Returns: {
          success: boolean;
          message: string;
          new_balance: number;
        };
      };
      check_feature_unlock: {
        Args: {
          p_feature_key: string;
        };
        Returns: {
          unlocked: boolean;
          message: string;
          requirements_met: boolean;
        };
      };
      unlock_feature: {
        Args: {
          p_feature_key: string;
          p_force?: boolean;
        };
        Returns: {
          success: boolean;
          message: string;
        };
      };
      get_enabled_features: {
        Args: Record<string, never>;
        Returns: {
          key: string;
          name: string;
          description: string;
          token_requirements: Record<string, number> | null;
        }[];
      };
    };
    Enums: {
      metric_type:
        | 'activation'
        | 'engagement'
        | 'retention'
        | 'arpu'
        | 'conversion'
        | 'growth'
        | 'custom';
    };
  };
};
