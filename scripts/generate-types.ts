/**
 * TypeScript Types Generator for Avolve Database
 * 
 * This script generates TypeScript types from the Supabase database schema.
 * It can use either the Supabase CLI or the MCP server to generate types.
 * 
 * Usage:
 * - With CLI: npm run generate-types
 * - With environment variables:
 *   - SUPABASE_PROJECT_REF: Your Supabase project reference
 *   - SUPABASE_ACCESS_TOKEN: Your Supabase access token (if using MCP)
 *   - USE_MCP: Set to "true" to use MCP server instead of CLI
 */

import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';
import https from 'https';

// Configuration
const CONFIG = {
  outputDir: path.resolve(__dirname, '../types'),
  outputFile: 'supabase.ts',
  projectRef: process.env.SUPABASE_PROJECT_REF || 'hevrachacwtqdcktblsd', // Default to Avolve project
  accessToken: process.env.SUPABASE_ACCESS_TOKEN || '',
  schemas: ['public', 'auth', 'storage'],
  useMcp: process.env.USE_MCP === 'true',
};

/**
 * Generates types using the Supabase CLI
 */
async function generateTypesWithCli(): Promise<string> {
  console.log('Generating types using Supabase CLI...');
  
  try {
    // Check if supabase CLI is installed
    execSync('supabase --version', { stdio: 'ignore' });
  } catch (error) {
    throw new Error('Supabase CLI is not installed. Please install it first: https://supabase.com/docs/guides/cli');
  }
  
  const schemas = CONFIG.schemas.join(',');
  const command = `supabase gen types typescript --project-id ${CONFIG.projectRef} --schema ${schemas}`;
  
  try {
    return execSync(command).toString();
  } catch (error) {
    throw new Error(`Failed to generate types with CLI: ${error}`);
  }
}

/**
 * Generates types using the MCP server
 */
async function generateTypesWithMcp(): Promise<string> {
  console.log('Generating types using MCP server...');
  
  if (!CONFIG.accessToken) {
    throw new Error('SUPABASE_ACCESS_TOKEN environment variable is not set');
  }
  
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'api.supabase.com',
      path: `/v1/projects/${CONFIG.projectRef}/types/typescript`,
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${CONFIG.accessToken}`,
        'Content-Type': 'application/json'
      }
    };
    
    const req = https.request(options, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        if (res.statusCode !== 200) {
          reject(new Error(`MCP server returned status code ${res.statusCode}: ${data}`));
          return;
        }
        
        try {
          const response = JSON.parse(data);
          resolve(response.types || '');
        } catch (error) {
          reject(new Error(`Failed to parse MCP response: ${error}`));
        }
      });
    });
    
    req.on('error', (error) => {
      reject(new Error(`MCP request failed: ${error}`));
    });
    
    req.end();
  });
}

/**
 * Processes the generated types to add additional information
 */
function processTypes(types: string): string {
  // Add a header with generation timestamp
  const timestamp = new Date().toISOString();
  const header = `/**
 * Avolve Database Types
 * Generated on: ${timestamp}
 * DO NOT EDIT DIRECTLY - This file is automatically generated
 */

`;

  // Add any custom type augmentations or utility types
  const utilities = `
// Utility types
export type NonNullableFields<T> = {
  [P in keyof T]: NonNullable<T[P]>;
};

export type PartialBy<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;
`;

  return header + types + utilities;
}

// Main execution
async function main() {
  // Ensure output directory exists
  if (!fs.existsSync(CONFIG.outputDir)) {
    fs.mkdirSync(CONFIG.outputDir, { recursive: true });
  }

  try {
    console.log(`Generating TypeScript types for project: ${CONFIG.projectRef}`);
    console.log(`Schemas: ${CONFIG.schemas.join(', ')}`);
    
    if (!CONFIG.projectRef) {
      throw new Error('SUPABASE_PROJECT_REF environment variable is not set');
    }

    // Generate types using the appropriate method
    const rawTypes = CONFIG.useMcp 
      ? await generateTypesWithMcp() 
      : await generateTypesWithCli();
    
    // Process and enhance the types
    const processedTypes = processTypes(rawTypes);
    
    // Save to file
    const outputPath = path.join(CONFIG.outputDir, CONFIG.outputFile);
    fs.writeFileSync(outputPath, processedTypes);
    
    console.log(`TypeScript types generated successfully at: ${outputPath}`);
    
    // Generate a simple index.ts file to re-export the types
    const indexPath = path.join(CONFIG.outputDir, 'index.ts');
    fs.writeFileSync(indexPath, `export * from './${CONFIG.outputFile.replace('.ts', '')}';\n`);
    console.log(`Created index file at: ${indexPath}`);
    
  } catch (error) {
    console.error('Error generating TypeScript types:');
    console.error(error instanceof Error ? error.message : error);
    process.exit(1);
  }
}

main().catch(error => {
  console.error('Unhandled error:', error);
  process.exit(1);
});
